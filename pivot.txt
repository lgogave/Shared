    static void Main(string[] args)
        {
            // Check if the user provided the file path as an argument
            if (args.Length == 0)
            {
                Console.WriteLine("Please provide the Excel file path as an argument.");
                //return;
              
            }
            //string filePath = args[0];
            string filePath = @"C:\Users\Laxmikant\Downloads\wex-schd-adh.xlsx";
            Application excelApp = null;
            Workbook workbook = null;
            Worksheet worksheet = null;

            try
            {
                // Start Excel application
                excelApp = new Application();
                excelApp.DisplayAlerts = false;  // Prevent Excel prompts
                excelApp.Visible = true;
                // Open Excel file
                workbook = excelApp.Workbooks.Open(filePath);
                //worksheet = workbook.Sheets[1] as Worksheet;
                worksheet = workbook.Sheets["Pivots"] as Worksheet;
                // Access the PivotTable
                //PivotTable pivotTable = worksheet.PivotTables(1) as PivotTable;
                string pivotTableName = "PivotTable1";
                foreach (PivotTable pivotTable in worksheet.PivotTables())
                {
                    Console.WriteLine($"Processing PivotTable: {pivotTable.Name} on sheet: {worksheet.Name}");
                    if (pivotTable.Name.ToLower() != pivotTableName.ToLower())
                        continue;
                    ClearPivotTableFilters(pivotTable);
                    // Get the initial list of sheet names before the drill-down
                    var initialSheetNames = GetSheetNames(workbook);

                    // Perform double-click on the Grand Total cell (drill-down)
                    Range grandTotalCell = pivotTable.TableRange2.Cells[pivotTable.TableRange2.Rows.Count, pivotTable.TableRange2.Columns.Count];
                    grandTotalCell.ShowDetail = true;

                    // Get the list of sheet names after the drill-down
                    var updatedSheetNames = GetSheetNames(workbook);

                    // Find the newly added sheet by comparing the lists
                    string newSheetName = updatedSheetNames.Except(initialSheetNames).FirstOrDefault();

                    if (!string.IsNullOrEmpty(newSheetName))
                    {
                        // Get the newly created worksheet reference
                        Worksheet newDetailSheet = workbook.Sheets[newSheetName] as Worksheet;

                        // Convert the detailed sheet data into a DataTable
                        DataTable dataTable = ConvertWorksheetToDataTableFaster(newDetailSheet);

                        // Display the DataTable (optional)
                        foreach (DataRow row in dataTable.Rows)
                        {
                            foreach (var item in row.ItemArray)
                            {
                                Console.Write(item + "\t");
                            }
                            Console.WriteLine();
                        }

                        // Delete the temporary sheet (optional)
                        newDetailSheet.Delete();
                    }
                    else
                    {
                        Console.WriteLine("No new sheet was created.");
                    }

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                // Clean up Excel COM objects properly
                if (workbook != null)
                {
                    workbook.Close(false); // Close without saving
                    Marshal.ReleaseComObject(workbook);
                }

                if (excelApp != null)
                {
                    excelApp.DisplayAlerts = true;
                    excelApp.Quit(); // Quit the Excel application
                    Marshal.ReleaseComObject(excelApp);
                }

                if (worksheet != null)
                {
                    Marshal.ReleaseComObject(worksheet);
                }

                // Force garbage collection to ensure COM objects are fully released
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
        }

        static DataTable ConvertWorksheetToDataTable(Worksheet worksheet)
        {
            DataTable dataTable = new DataTable();
            Range usedRange = worksheet.UsedRange; // Get the full used range in the worksheet
            int colCount = usedRange.Columns.Count;
            int rowCount = usedRange.Rows.Count;

            // Add columns to DataTable based on the header row (first row)
            for (int col = 1; col <= colCount; col++)
            {
                Range headerCell = usedRange.Cells[1, col] as Range;
                string columnName = headerCell?.Value2 != null ? headerCell.Value2.ToString() : "Column" + col;
                dataTable.Columns.Add(columnName);
            }

            // Add rows to DataTable (from row 2 to the last row)
            for (int row = 2; row <= rowCount; row++) // Skip the header row
            {
                DataRow dataRow = dataTable.NewRow();
                for (int col = 1; col <= colCount; col++)
                {
                    Range cell = usedRange.Cells[row, col] as Range;
                    dataRow[col - 1] = cell?.Value2 != null ? cell.Value2.ToString() : string.Empty;
                }
                dataTable.Rows.Add(dataRow);
            }

            return dataTable;
        }
        // Helper method to get the list of sheet names in the workbook
        static string[] GetSheetNames(Workbook workbook)
        {
            int sheetCount = workbook.Sheets.Count;
            string[] sheetNames = new string[sheetCount];

            for (int i = 1; i <= sheetCount; i++)
            {
                Worksheet sheet = workbook.Sheets[i] as Worksheet;
                sheetNames[i - 1] = sheet.Name;
            }

            return sheetNames;
        }
        static void ClearPivotTableFilters(PivotTable pivotTable)
        {
            foreach (PivotField pivotField in pivotTable.PivotFields())
            {
                // Clear filters for all types of fields: row, column, and page (top filters)
                if (pivotField.Orientation == XlPivotFieldOrientation.xlRowField ||
                    pivotField.Orientation == XlPivotFieldOrientation.xlColumnField ||
                    pivotField.Orientation == XlPivotFieldOrientation.xlPageField) // Top filters
                {
                    pivotField.ClearAllFilters(); // Clears any filters applied
                }
            }
        }
        static DataTable ConvertWorksheetToDataTableFaster(Worksheet worksheet)
        {
            // Get the used range of the worksheet
            Range usedRange = worksheet.UsedRange;
            int rowCount = usedRange.Rows.Count;
            int colCount = usedRange.Columns.Count;

            // Create a DataTable with the same number of columns
            DataTable dt = new DataTable();

            // Read the entire used range into a 2D array for faster access
            object[,] cellValues = (object[,])usedRange.Value2;

            // Add columns based on the first row (header)
            for (int col = 1; col <= colCount; col++)
            {
                dt.Columns.Add(cellValues[1, col]?.ToString() ?? $"Column {col}");
            }

            // Add rows starting from the second row (skipping header)
            for (int row = 2; row <= rowCount; row++)
            {
                DataRow dataRow = dt.NewRow();
                for (int col = 1; col <= colCount; col++)
                {
                    dataRow[col - 1] = cellValues[row, col]?.ToString() ?? string.Empty;
                }
                dt.Rows.Add(dataRow);
            }

            return dt;
        }
    }
