using System;
using System.Data;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public class Program
{
    public static void Main(string[] args)
    {
        // Your JSON data as a string
        string jsonData = "[{\"id\":1,\"email\":\"dqwedqw@dewde.co\",\"roles\":[\"agent\",\"admin\"],\"first_name\":\"Success\",\"middle_name\":null,\"last_name\":\"UJET\",\"avatar_url\":\"https://dqdqwd.co/assets2/default-profile.png\",\"agent_number\":null,\"crm_authenticated\":false,\"status\":{\"id\":-10,\"name\":\"Offline\",\"color\":\"grey\",\"wfm_id\":36,\"position\":10,\"status_type\":\"system\",\"setting\":{\"restricted\":false,\"all_roles_restricted\":false,\"breakthrough_enabled\":false},\"custom_roles\":[],\"translations\":[{\"lang\":\"es-ES\",\"translated_name\":\"Desconectado\"},{\"lang\":\"es\",\"translated_name\":\"Desconectado\"},{\"lang\":\"fr\",\"translated_name\":\"Hors ligne\"},{\"lang\":\"fr-CA\",\"translated_name\":\"Hors ligne\"},{\"lang\":\"de\",\"translated_name\":\"Offline\"},{\"lang\":\"ja\",\"translated_name\":\"オフライン\"},{\"lang\":\"ko\",\"translated_name\":\"오프라인\"},{\"lang\":\"it\",\"translated_name\":\"Offline\"},{\"lang\":\"zh\",\"translated_name\":\"离线\"},{\"lang\":\"pt-PT\",\"translated_name\":\"Offline\"},{\"lang\":\"tr\",\"translated_name\":\"Çevrimdışı\"},{\"lang\":\"vi\",\"translated_name\":\"Ngoại tuyến\"},{\"lang\":\"th\",\"translated_name\":\"ออฟไลน์\"},{\"lang\":\"ar\",\"translated_name\":\"غير متصل\"},{\"lang\":\"ru\",\"translated_name\":\"В режиме \\\"оффлайн\\\"\"},{\"lang\":\"hi\",\"translated_name\":\"ऑफ़लाइन\"},{\"lang\":\"ro\",\"translated_name\":\"Offline\"},{\"lang\":\"hr\",\"translated_name\":\"Izvan mreže\"},{\"lang\":\"uk\",\"translated_name\":\"Офлайн\"}]},\"online\":false,\"wrap_up\":false,\"call_count\":0,\"chat_count\":0,\"location\":null,\"created_at\":\"2022-12-21T18:30:19.000Z\",\"last_login_time\":\"2024-08-20T14:34:46.000Z\",\"status_updated_at\":\"2024-08-20T17:11:12.000Z\",\"teams\":[{\"id\":1,\"name\":\"Test\",\"parent_id\":null,\"position\":0,\"agents_count\":5,\"deleted\":false}],\"channels\":[]} ]";

        // Deserialize JSON into JArray
        JArray jsonArray = JArray.Parse(jsonData);

        // Convert to DataTable
        DataTable dataTable = JsonToDataTable(jsonArray);

        // Save DataTable to CSV
        string csvFilePath = "output.csv";
        SaveDataTableToCsv(dataTable, csvFilePath);

        Console.WriteLine($"Data saved to {csvFilePath}");
    }

    private static DataTable JsonToDataTable(JArray jsonArray)
    {
        DataTable dataTable = new DataTable();

        // Iterate through each JObject in the JArray
        foreach (var item in jsonArray)
        {
            DataRow row = dataTable.NewRow();

            // Iterate through each property in the JObject
            foreach (var property in item.Children<JProperty>())
            {
                // If the column does not exist, create it
                if (!dataTable.Columns.Contains(property.Name))
                {
                    dataTable.Columns.Add(property.Name, typeof(string)); // Use string type for simplicity
                }

                // Handle nested JSON objects and arrays by converting to string
                if (property.Value.Type == JTokenType.Object)
                {
                    row[property.Name] = property.Value.ToString(); // Serialize nested object as string
                }
                else if (property.Value.Type == JTokenType.Array)
                {
                    row[property.Name] = string.Join(", ", property.Value.Select(v => v.ToString())); // Join array elements
                }
                else
                {
                    row[property.Name] = property.Value; // Set the value directly
                }
            }

            dataTable.Rows.Add(row);
        }

        return dataTable;
    }

    private static void SaveDataTableToCsv(DataTable dataTable, string filePath)
    {
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            // Write the header
            for (int i = 0; i < dataTable.Columns.Count; i++)
            {
                writer.Write(dataTable.Columns[i]);
                if (i < dataTable.Columns.Count - 1)
                    writer.Write(",");
            }
            writer.WriteLine();

            // Write the rows
            foreach (DataRow row in dataTable.Rows)
            {
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    writer.Write(row[i]);
                    if (i < dataTable.Columns.Count - 1)
                        writer.Write(",");
                }
                writer.WriteLine();
            }
        }
    }
}
